// This file is @generated by prost-build.
/// Params defines the parameters for the module.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Params {}
/// MsgUpdateParams is the Msg/UpdateParams request type.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgUpdateParams {
    /// authority is the address that controls the module (defaults to x/gov unless overwritten).
    #[prost(string, tag = "1")]
    pub authority: ::prost::alloc::string::String,
    /// params defines the module parameters to update.
    ///
    /// NOTE: All parameters must be supplied.
    #[prost(message, optional, tag = "2")]
    pub params: ::core::option::Option<Params>,
}
/// MsgUpdateParamsResponse defines the response structure for executing a
/// MsgUpdateParams message.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MsgUpdateParamsResponse {}
/// MsgCreateVaultRequest is the request message for the CreateVault endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateVaultRequest {
    /// admin is the creator and initial administrator of the vault.
    #[prost(string, tag = "1")]
    pub admin: ::prost::alloc::string::String,
    /// share_denom is the name of the assets created by the vault used for distribution.
    #[prost(string, tag = "2")]
    pub share_denom: ::prost::alloc::string::String,
    /// underlying_asset is the denomination of the asset supported by the vault.
    #[prost(string, tag = "3")]
    pub underlying_asset: ::prost::alloc::string::String,
}
/// MsgCreateVaultResponse is the response message for the CreateVault endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgCreateVaultResponse {
    /// vault_address is the bech32 address of the newly created vault.
    #[prost(string, tag = "1")]
    pub vault_address: ::prost::alloc::string::String,
}
/// MsgSwapInRequest is the request message for depositing underlying assets into a vault in exchange for shares.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapInRequest {
    /// owner is the address initiating the swap in (deposit).
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    /// vault_address is the address of the target vault.
    #[prost(string, tag = "2")]
    pub vault_address: ::prost::alloc::string::String,
    /// assets is the amount of underlying assets to deposit.
    #[prost(message, optional, tag = "3")]
    pub assets: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
/// MsgSwapInResponse is the response message for a successful SwapIn.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapInResponse {
    /// shares_received is the amount of vault shares minted.
    #[prost(message, optional, tag = "1")]
    pub shares_received: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
/// MsgSwapOutRequest is the request message for redeeming vault shares in exchange for underlying assets.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapOutRequest {
    /// owner is the address initiating the swap out (withdraw).
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    /// vault_address is the address of the vault to redeem from.
    #[prost(string, tag = "2")]
    pub vault_address: ::prost::alloc::string::String,
    /// assets is the amount of underlying assets to withdraw.
    #[prost(message, optional, tag = "3")]
    pub assets: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
/// MsgSwapOutResponse is the response message for a successful SwapOut.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgSwapOutResponse {
    /// shares_burned is the amount of shares burned in exchange for assets.
    #[prost(message, optional, tag = "1")]
    pub shares_burned: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
/// MsgRedeemRequest is the request message for the Redeem endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRedeemRequest {
    /// owner is the account that owns the shares and is initiating the redemption.
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    /// vault_address is the address of the vault to redeem from.
    #[prost(string, tag = "2")]
    pub vault_address: ::prost::alloc::string::String,
    /// shares_to_redeem is the amount of vault shares to redeem.
    #[prost(message, optional, tag = "3")]
    pub shares_to_redeem: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// receiver is the address that will receive the redeemed assets. If empty, defaults to the owner.
    #[prost(string, tag = "4")]
    pub receiver: ::prost::alloc::string::String,
}
/// MsgRedeemResponse is the response message for the Redeem endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MsgRedeemResponse {
    /// assets_received is the amount of underlying assets received from the redemption.
    #[prost(message, optional, tag = "1")]
    pub assets_received: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
/// Generated client implementations.
#[cfg(feature = "grpc")]
#[cfg_attr(docsrs, doc(cfg(feature = "grpc")))]
pub mod msg_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// Msg is the service for the vault module's tx endpoints.
    #[derive(Debug, Clone)]
    pub struct MsgClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    #[cfg_attr(docsrs, doc(cfg(feature = "grpc-transport")))]
    impl MsgClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MsgClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> MsgClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            MsgClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// CreateVault creates a new vault.
        pub async fn create_vault(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgCreateVaultRequest>,
        ) -> std::result::Result<tonic::Response<super::MsgCreateVaultResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Msg/CreateVault");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Msg", "CreateVault"));
            self.inner.unary(req, path, codec).await
        }
        /// SwapIn exchanges underlying assets for vault shares by depositing them into a vault.
        pub async fn swap_in(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSwapInRequest>,
        ) -> std::result::Result<tonic::Response<super::MsgSwapInResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Msg/SwapIn");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Msg", "SwapIn"));
            self.inner.unary(req, path, codec).await
        }
        /// SwapOut exchanges vault shares for underlying assets by withdrawing from a vault.
        pub async fn swap_out(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgSwapOutRequest>,
        ) -> std::result::Result<tonic::Response<super::MsgSwapOutResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Msg/SwapOut");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Msg", "SwapOut"));
            self.inner.unary(req, path, codec).await
        }
        /// Redeem redeems a specific amount of shares from a vault for a calculated amount of the underlying asset.
        pub async fn redeem(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgRedeemRequest>,
        ) -> std::result::Result<tonic::Response<super::MsgRedeemResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Msg/Redeem");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Msg", "Redeem"));
            self.inner.unary(req, path, codec).await
        }
        /// UpdateParams defines a (governance) operation for updating the module
        /// parameters. The authority defaults to the x/gov module account.
        pub async fn update_params(
            &mut self,
            request: impl tonic::IntoRequest<super::MsgUpdateParams>,
        ) -> std::result::Result<tonic::Response<super::MsgUpdateParamsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Msg/UpdateParams");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Msg", "UpdateParams"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "grpc")]
#[cfg_attr(docsrs, doc(cfg(feature = "grpc")))]
pub mod msg_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with MsgServer.
    #[async_trait]
    pub trait Msg: std::marker::Send + std::marker::Sync + 'static {
        /// CreateVault creates a new vault.
        async fn create_vault(
            &self,
            request: tonic::Request<super::MsgCreateVaultRequest>,
        ) -> std::result::Result<tonic::Response<super::MsgCreateVaultResponse>, tonic::Status>;
        /// SwapIn exchanges underlying assets for vault shares by depositing them into a vault.
        async fn swap_in(
            &self,
            request: tonic::Request<super::MsgSwapInRequest>,
        ) -> std::result::Result<tonic::Response<super::MsgSwapInResponse>, tonic::Status>;
        /// SwapOut exchanges vault shares for underlying assets by withdrawing from a vault.
        async fn swap_out(
            &self,
            request: tonic::Request<super::MsgSwapOutRequest>,
        ) -> std::result::Result<tonic::Response<super::MsgSwapOutResponse>, tonic::Status>;
        /// Redeem redeems a specific amount of shares from a vault for a calculated amount of the underlying asset.
        async fn redeem(
            &self,
            request: tonic::Request<super::MsgRedeemRequest>,
        ) -> std::result::Result<tonic::Response<super::MsgRedeemResponse>, tonic::Status>;
        /// UpdateParams defines a (governance) operation for updating the module
        /// parameters. The authority defaults to the x/gov module account.
        async fn update_params(
            &self,
            request: tonic::Request<super::MsgUpdateParams>,
        ) -> std::result::Result<tonic::Response<super::MsgUpdateParamsResponse>, tonic::Status>;
    }
    /// Msg is the service for the vault module's tx endpoints.
    #[derive(Debug)]
    pub struct MsgServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> MsgServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for MsgServer<T>
    where
        T: Msg,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/vault.v1.Msg/CreateVault" => {
                    #[allow(non_camel_case_types)]
                    struct CreateVaultSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgCreateVaultRequest> for CreateVaultSvc<T> {
                        type Response = super::MsgCreateVaultResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgCreateVaultRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as Msg>::create_vault(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateVaultSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vault.v1.Msg/SwapIn" => {
                    #[allow(non_camel_case_types)]
                    struct SwapInSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgSwapInRequest> for SwapInSvc<T> {
                        type Response = super::MsgSwapInResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgSwapInRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as Msg>::swap_in(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SwapInSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vault.v1.Msg/SwapOut" => {
                    #[allow(non_camel_case_types)]
                    struct SwapOutSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgSwapOutRequest> for SwapOutSvc<T> {
                        type Response = super::MsgSwapOutResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgSwapOutRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as Msg>::swap_out(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SwapOutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vault.v1.Msg/Redeem" => {
                    #[allow(non_camel_case_types)]
                    struct RedeemSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgRedeemRequest> for RedeemSvc<T> {
                        type Response = super::MsgRedeemResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgRedeemRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as Msg>::redeem(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RedeemSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vault.v1.Msg/UpdateParams" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateParamsSvc<T: Msg>(pub Arc<T>);
                    impl<T: Msg> tonic::server::UnaryService<super::MsgUpdateParams> for UpdateParamsSvc<T> {
                        type Response = super::MsgUpdateParamsResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::MsgUpdateParams>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as Msg>::update_params(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(empty_body());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for MsgServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "vault.v1.Msg";
    impl<T> tonic::server::NamedService for MsgServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// EventDeposit is an event emitted when assets are deposited into a vault.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventDeposit {
    /// caller is the address of the account that initiated the deposit.
    #[prost(string, tag = "1")]
    pub caller: ::prost::alloc::string::String,
    /// owner is the address of the account that will receive the minted shares.
    #[prost(string, tag = "2")]
    pub owner: ::prost::alloc::string::String,
    /// assets is the coins amount string of the underlying assets that were deposited.
    #[prost(string, tag = "3")]
    pub assets: ::prost::alloc::string::String,
    /// shares is the coins amount string of the vault shares that were minted.
    #[prost(string, tag = "4")]
    pub shares: ::prost::alloc::string::String,
    /// vault_id is the numerical identifier of the vault.
    #[prost(uint32, tag = "5")]
    pub vault_id: u32,
}
/// EventWithdraw is an event emitted when assets are withdrawn from a vault.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventWithdraw {
    /// caller is the address of the account that initiated the withdrawal.
    #[prost(string, tag = "1")]
    pub caller: ::prost::alloc::string::String,
    /// receiver is the address of the account that will receive the underlying assets.
    #[prost(string, tag = "2")]
    pub receiver: ::prost::alloc::string::String,
    /// owner is the address of the account from which the shares were burned.
    #[prost(string, tag = "3")]
    pub owner: ::prost::alloc::string::String,
    /// assets is the coins amount string of the underlying assets that were withdrawn.
    #[prost(string, tag = "4")]
    pub assets: ::prost::alloc::string::String,
    /// shares is the coins amount string of the vault shares that were burned.
    #[prost(string, tag = "5")]
    pub shares: ::prost::alloc::string::String,
    /// vault_id is the numerical identifier of the vault.
    #[prost(uint32, tag = "6")]
    pub vault_id: u32,
}
/// EventVaultCreated is an event emitted when a vault is created.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventVaultCreated {
    /// vault_address is the bech32 address of the vault.
    #[prost(string, tag = "1")]
    pub vault_address: ::prost::alloc::string::String,
    /// admin is the address of the account that manages the vault.
    #[prost(string, tag = "2")]
    pub admin: ::prost::alloc::string::String,
    /// share_denom is the name of the assets created by the vault used for distribution.
    #[prost(string, tag = "3")]
    pub share_denom: ::prost::alloc::string::String,
    /// underlying_assets is the denominations of the assets supported by the vault.
    #[prost(string, repeated, tag = "4")]
    pub underlying_assets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
/// EventSwapIn is an event emitted when assets are swapped in for vault shares.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventSwapIn {
    /// owner is the address of the account that initiated the swap.
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    /// amount_in is the amount of underlying assets that were swapped in.
    #[prost(message, optional, tag = "2")]
    pub amount_in: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// shares_received is the amount of vault shares that were minted.
    #[prost(message, optional, tag = "3")]
    pub shares_received: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// vault_address is the bech32 address of the vault.
    #[prost(string, tag = "4")]
    pub vault_address: ::prost::alloc::string::String,
}
/// EventSwapOut is an event emitted when vault shares are swapped out for underlying assets.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventSwapOut {
    /// owner is the address of the account that initiated the swap.
    #[prost(string, tag = "1")]
    pub owner: ::prost::alloc::string::String,
    /// shares_burned is the amount of vault shares that were burned.
    #[prost(message, optional, tag = "2")]
    pub shares_burned: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// amount_out is the amount of underlying assets that were sent to the recipient.
    #[prost(message, optional, tag = "3")]
    pub amount_out: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// vault_address is the bech32 address of the vault.
    #[prost(string, tag = "4")]
    pub vault_address: ::prost::alloc::string::String,
}
/// EventVaultReconcile is an event emitted when a vault's interest is reconciled.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventVaultReconcile {
    /// vault_address is the bech32 address of the vault.
    #[prost(string, tag = "1")]
    pub vault_address: ::prost::alloc::string::String,
    /// principal_before is the principal amount before applying interest.
    #[prost(message, optional, tag = "2")]
    pub principal_before: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// principal_after is the principal amount after applying interest.
    #[prost(message, optional, tag = "3")]
    pub principal_after: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// rate is the interest rate for the period.
    #[prost(string, tag = "4")]
    pub rate: ::prost::alloc::string::String,
    /// time is the payout duration in seconds.
    #[prost(int64, tag = "5")]
    pub time: i64,
    /// interest_earned is the interest amount (can be positive or negative).
    #[prost(message, optional, tag = "6")]
    pub interest_earned: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
/// EventVaultInterestChange is an event emitted when a vault's interest rate is changed.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventVaultInterestChange {
    /// vault_address is the bech32 address of the vault.
    #[prost(string, tag = "1")]
    pub vault_address: ::prost::alloc::string::String,
    /// previous_rate is the previous interest rate.
    #[prost(string, tag = "2")]
    pub previous_rate: ::prost::alloc::string::String,
    /// new_rate is the new interest rate.
    #[prost(string, tag = "3")]
    pub new_rate: ::prost::alloc::string::String,
}
/// VaultAccount represents a central holding place for assets, governed by a set of rules.
/// It is based on the ERC-4626 standard and builds upon the Provenance Marker module.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VaultAccount {
    /// base_account cosmos account information including address and coin holdings.
    #[prost(message, optional, tag = "1")]
    pub base_account: ::core::option::Option<cosmos_sdk_proto::cosmos::auth::v1beta1::BaseAccount>,
    /// share_denom is the denomination used to represent shares in the vault (e.g., vault tokens).
    #[prost(string, tag = "2")]
    pub share_denom: ::prost::alloc::string::String,
    /// underlying_assets specifies the denomination(s) of the asset(s) managed by the vault.
    #[prost(string, repeated, tag = "3")]
    pub underlying_assets: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// admin is the address that has administrative privileges over the vault.
    #[prost(string, tag = "4")]
    pub admin: ::prost::alloc::string::String,
    /// current_interest_rate is the actual interest rate currently being applied.
    /// This may be adjusted programmatically (e.g., due to lack of funds).
    #[prost(string, tag = "5")]
    pub current_interest_rate: ::prost::alloc::string::String,
    /// desired_interest_rate is the target interest rate that the vault intends to apply.
    #[prost(string, tag = "6")]
    pub desired_interest_rate: ::prost::alloc::string::String,
}
/// VaultInterestDetails stores metadata related to interest accrual and payment for a vault.
///
/// period_start represents the Unix timestamp (in seconds) when the current interest
/// accrual period began. This value is updated when interest is successfully paid out.
/// If multiple transactions occur in the same block, only the first will trigger interest reconciliation.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VaultInterestDetails {
    /// The start time (in Unix seconds) of the current interest accrual period.
    #[prost(int64, tag = "1")]
    pub period_start: i64,
    /// The expire time (in Unix seconds) of the current interest accrual period.
    #[prost(int64, tag = "2")]
    pub expire_time: i64,
}
/// QueryParamsRequest is request type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsRequest {}
/// QueryParamsResponse is response type for the Query/Params RPC method.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryParamsResponse {
    /// params holds all the parameters of this module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
}
/// QueryVaultsRequest is the request message for the Query/Vaults endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVaultsRequest {
    /// pagination defines an optional pagination for the request.
    #[prost(message, optional, tag = "1")]
    pub pagination:
        ::core::option::Option<cosmos_sdk_proto::cosmos::base::query::v1beta1::PageRequest>,
}
/// QueryVaultsResponse is the response message for the Query/Vaults endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVaultsResponse {
    /// vaults is a list of all vaults.
    #[prost(message, repeated, tag = "1")]
    pub vaults: ::prost::alloc::vec::Vec<VaultAccount>,
    /// pagination defines the pagination in the response.
    #[prost(message, optional, tag = "2")]
    pub pagination:
        ::core::option::Option<cosmos_sdk_proto::cosmos::base::query::v1beta1::PageResponse>,
}
/// QueryVaultRequest is the request message for the Query/Vault endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVaultRequest {
    /// vault_address is the bech32 address of the vault to query.
    #[prost(string, tag = "1")]
    pub vault_address: ::prost::alloc::string::String,
}
/// QueryVaultResponse is the response message for the Query/Vault endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryVaultResponse {
    /// vault is the requested vault.
    #[prost(message, optional, tag = "1")]
    pub vault: ::core::option::Option<VaultAccount>,
}
/// QueryTotalAssetsRequest is the request message for the Query/TotalAssets endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalAssetsRequest {
    /// vault_address is the bech32 address of the vault to query.
    #[prost(string, tag = "1")]
    pub vault_address: ::prost::alloc::string::String,
}
/// QueryTotalAssetsResponse is the response message for the Query/TotalAssets endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTotalAssetsResponse {
    /// amount is the total assets in the vault.
    #[prost(message, optional, tag = "1")]
    pub amount: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
/// QueryEstimateSwapInRequest is the request message for the Query/EstimateSwapIn endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEstimateSwapInRequest {
    /// vault_address is the bech32 address of the vault to query.
    #[prost(string, tag = "1")]
    pub vault_address: ::prost::alloc::string::String,
    /// assets is the amount of underlying assets to swap in.
    #[prost(message, optional, tag = "2")]
    pub assets: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
/// QueryEstimateSwapInResponse is the response message for the Query/EstimateSwapIn endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEstimateSwapInResponse {
    /// assets is the estimated amount of shares that would be received.
    #[prost(message, optional, tag = "1")]
    pub assets: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// The block height when the estimate occurred.
    #[prost(int64, tag = "2")]
    pub height: i64,
    /// The UTC block time when the estimate occurred.
    #[prost(message, optional, tag = "3")]
    pub time: ::core::option::Option<::prost_types::Timestamp>,
}
/// QueryEstimateSwapOutRequest is the request message for the Query/EstimateSwapOut endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEstimateSwapOutRequest {
    /// vault_address is the bech32 address of the vault to query.
    #[prost(string, tag = "1")]
    pub vault_address: ::prost::alloc::string::String,
    /// assets is the amount of shares to swap out.
    #[prost(message, optional, tag = "2")]
    pub assets: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
}
/// QueryEstimateSwapOutResponse is the response message for the Query/EstimateSwapOut endpoint.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryEstimateSwapOutResponse {
    /// assets is the estimated amount of underlying assets that would be received.
    #[prost(message, optional, tag = "1")]
    pub assets: ::core::option::Option<cosmos_sdk_proto::cosmos::base::v1beta1::Coin>,
    /// The block height when the estimate occurred.
    #[prost(int64, tag = "2")]
    pub height: i64,
    /// The UTC block time when the estimate occurred.
    #[prost(message, optional, tag = "3")]
    pub time: ::core::option::Option<::prost_types::Timestamp>,
}
/// Generated client implementations.
#[cfg(feature = "grpc")]
#[cfg_attr(docsrs, doc(cfg(feature = "grpc")))]
pub mod query_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// Query is the service for the vault module's query endpoints.
    #[derive(Debug, Clone)]
    pub struct QueryClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    #[cfg(feature = "grpc-transport")]
    #[cfg_attr(docsrs, doc(cfg(feature = "grpc-transport")))]
    impl QueryClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> QueryClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> QueryClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            QueryClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Vaults returns a paginated list of all vaults.
        pub async fn vaults(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryVaultsRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryVaultsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Query/Vaults");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Query", "Vaults"));
            self.inner.unary(req, path, codec).await
        }
        /// Vault returns the configuration and state of a specific vault.
        pub async fn vault(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryVaultRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryVaultResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Query/Vault");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Query", "Vault"));
            self.inner.unary(req, path, codec).await
        }
        /// TotalAssets returns the total amount of the underlying asset managed by the vault.
        /// This is equivalent to the ERC-4626 function `totalAssets`.
        pub async fn total_assets(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTotalAssetsRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryTotalAssetsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Query/TotalAssets");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Query", "TotalAssets"));
            self.inner.unary(req, path, codec).await
        }
        /// EstimateSwapIn estimates the amount of shares that would be received for a given amount of underlying assets.
        pub async fn estimate_swap_in(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryEstimateSwapInRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryEstimateSwapInResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Query/EstimateSwapIn");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Query", "EstimateSwapIn"));
            self.inner.unary(req, path, codec).await
        }
        /// EstimateSwapOut estimates the amount of underlying assets that would be received for a given amount of shares.
        pub async fn estimate_swap_out(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryEstimateSwapOutRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryEstimateSwapOutResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Query/EstimateSwapOut");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Query", "EstimateSwapOut"));
            self.inner.unary(req, path, codec).await
        }
        pub async fn params(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryParamsRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryParamsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static("/vault.v1.Query/Params");
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("vault.v1.Query", "Params"));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
#[cfg(feature = "grpc")]
#[cfg_attr(docsrs, doc(cfg(feature = "grpc")))]
pub mod query_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with QueryServer.
    #[async_trait]
    pub trait Query: std::marker::Send + std::marker::Sync + 'static {
        /// Vaults returns a paginated list of all vaults.
        async fn vaults(
            &self,
            request: tonic::Request<super::QueryVaultsRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryVaultsResponse>, tonic::Status>;
        /// Vault returns the configuration and state of a specific vault.
        async fn vault(
            &self,
            request: tonic::Request<super::QueryVaultRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryVaultResponse>, tonic::Status>;
        /// TotalAssets returns the total amount of the underlying asset managed by the vault.
        /// This is equivalent to the ERC-4626 function `totalAssets`.
        async fn total_assets(
            &self,
            request: tonic::Request<super::QueryTotalAssetsRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryTotalAssetsResponse>, tonic::Status>;
        /// EstimateSwapIn estimates the amount of shares that would be received for a given amount of underlying assets.
        async fn estimate_swap_in(
            &self,
            request: tonic::Request<super::QueryEstimateSwapInRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryEstimateSwapInResponse>, tonic::Status>;
        /// EstimateSwapOut estimates the amount of underlying assets that would be received for a given amount of shares.
        async fn estimate_swap_out(
            &self,
            request: tonic::Request<super::QueryEstimateSwapOutRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryEstimateSwapOutResponse>, tonic::Status>;
        async fn params(
            &self,
            request: tonic::Request<super::QueryParamsRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryParamsResponse>, tonic::Status>;
    }
    /// Query is the service for the vault module's query endpoints.
    #[derive(Debug)]
    pub struct QueryServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> QueryServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for QueryServer<T>
    where
        T: Query,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/vault.v1.Query/Vaults" => {
                    #[allow(non_camel_case_types)]
                    struct VaultsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryVaultsRequest> for VaultsSvc<T> {
                        type Response = super::QueryVaultsResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryVaultsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as Query>::vaults(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VaultsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vault.v1.Query/Vault" => {
                    #[allow(non_camel_case_types)]
                    struct VaultSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryVaultRequest> for VaultSvc<T> {
                        type Response = super::QueryVaultResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryVaultRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as Query>::vault(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VaultSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vault.v1.Query/TotalAssets" => {
                    #[allow(non_camel_case_types)]
                    struct TotalAssetsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryTotalAssetsRequest> for TotalAssetsSvc<T> {
                        type Response = super::QueryTotalAssetsResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryTotalAssetsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut =
                                async move { <T as Query>::total_assets(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = TotalAssetsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vault.v1.Query/EstimateSwapIn" => {
                    #[allow(non_camel_case_types)]
                    struct EstimateSwapInSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryEstimateSwapInRequest>
                        for EstimateSwapInSvc<T>
                    {
                        type Response = super::QueryEstimateSwapInResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryEstimateSwapInRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::estimate_swap_in(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EstimateSwapInSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vault.v1.Query/EstimateSwapOut" => {
                    #[allow(non_camel_case_types)]
                    struct EstimateSwapOutSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryEstimateSwapOutRequest>
                        for EstimateSwapOutSvc<T>
                    {
                        type Response = super::QueryEstimateSwapOutResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryEstimateSwapOutRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as Query>::estimate_swap_out(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = EstimateSwapOutSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/vault.v1.Query/Params" => {
                    #[allow(non_camel_case_types)]
                    struct ParamsSvc<T: Query>(pub Arc<T>);
                    impl<T: Query> tonic::server::UnaryService<super::QueryParamsRequest> for ParamsSvc<T> {
                        type Response = super::QueryParamsResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryParamsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move { <T as Query>::params(&inner, request).await };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ParamsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(empty_body());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for QueryServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "vault.v1.Query";
    impl<T> tonic::server::NamedService for QueryServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
/// GenesisState defines the vault module's genesis state.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GenesisState {
    /// params defines all the parameters of the module.
    #[prost(message, optional, tag = "1")]
    pub params: ::core::option::Option<Params>,
    /// vaults defines the vaults that exist at genesis.
    #[prost(message, repeated, tag = "2")]
    pub vaults: ::prost::alloc::vec::Vec<VaultAccount>,
}
